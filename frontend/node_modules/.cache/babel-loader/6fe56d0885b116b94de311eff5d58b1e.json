{"ast":null,"code":"var express = require('express');\n\nvar mongoClient = require('mongodb').MongoClient;\n\nconst router = express.Router();\nrouter.use(express.json());\nvar url = 'mongodb://localhost:27017/projetoweb';\nmongoClient.connect(url, function (err, client) {\n  router.get('/', (req, res) => {\n    var db = client.db('projetoweb');\n    db.collection('cep').find({}).toArray((err, docs) => {\n      if (err) {\n        res.status(500).send('Internal Server Error');\n      } else {\n        res.status(200).send(docs);\n      }\n    });\n  });\n  router.post('/', (req, res) => {\n    var db = client.db('projetoweb');\n    cepBanco = db.collection('cep');\n    cepBanco.find({\n      cep: req.body.cep\n    }).toArray((err, cepExistente) => {\n      if (err) {\n        res.status(500).send('Internal Server Error');\n      } else {\n        if (!cepExistente) {\n          cepBanco.insertOne(req.body, function (err, response) {\n            if (err) {\n              res.status(500).send(err);\n            } else {\n              res.status(201).send('CEP adicionado!');\n            }\n          });\n        } else {\n          res.status(400).send('CEP já existe!');\n        }\n      }\n    });\n  });\n  router.post('/find', (req, res) => {\n    var db = client.db('projetoweb');\n    cepBanco = db.collection('cep');\n    cepBanco.find({\n      cep: req.body.cep\n    }).toArray((err, cepExistente) => {\n      if (err) {\n        res.status(500).send('Internal Server Error');\n      } else {\n        if (cepExistente) {\n          res.status(200).send(cepExistente);\n        } else {\n          res.status(404).send('Nenhum CEP encontrado');\n        }\n      }\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/gilberto/ENGSOFT/Web2/frontend/src/pages/BuscaCep.js"],"names":["express","require","mongoClient","MongoClient","router","Router","use","json","url","connect","err","client","get","req","res","db","collection","find","toArray","docs","status","send","post","cepBanco","cep","body","cepExistente","insertOne","response","module","exports"],"mappings":"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","sourcesContent":["var express = require('express');\nvar mongoClient = require('mongodb').MongoClient;\nconst router = express.Router();\nrouter.use(express.json())\n\nvar url = 'mongodb://localhost:27017/projetoweb';\n\nmongoClient.connect(url, function (err, client) {\n\n    router.get('/', (req, res) => {\n\n        var db = client.db('projetoweb')\n        db.collection('cep').find({}).toArray((err, docs) => {\n            if(err){\n                res.status(500).send('Internal Server Error');\n            } else {\n                res.status(200).send(docs)\n            }\n        })\n    })\n    \n    router.post('/', (req, res) => {\n        var db = client.db('projetoweb')\n        cepBanco = db.collection('cep')\n        cepBanco.find({ cep: req.body.cep }).toArray((err, cepExistente) => {\n            if(err){\n                res.status(500).send('Internal Server Error');\n            } else {\n                if(!cepExistente){\n                    cepBanco.insertOne(req.body, function(err, response) {\n                        if (err) {\n                            res.status(500).send(err);\n                        } else {\n                            res.status(201).send('CEP adicionado!');\n                        }\n                    })\n                } else {\n                    res.status(400).send('CEP já existe!')\n                }\n            }\n        });\n    })\n\n    router.post('/find', (req, res) => {\n        var db = client.db('projetoweb')\n        cepBanco = db.collection('cep')\n        cepBanco.find({ cep: req.body.cep }).toArray((err, cepExistente) => {\n            if(err){\n                res.status(500).send('Internal Server Error');\n            } else {\n                if(cepExistente){\n                    res.status(200).send(cepExistente);\n                } else {\n                    res.status(404).send('Nenhum CEP encontrado')\n                }\n            }\n        });\n    })\n})\n\n\nmodule.exports = router;"]},"metadata":{},"sourceType":"module"}